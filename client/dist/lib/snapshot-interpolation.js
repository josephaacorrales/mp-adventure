const Snap = (function (t) { const e = {}; function r (n) { if (e[n]) return e[n].exports; const i = e[n] = { i: n, l: !1, exports: {} }; return t[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports } return r.m = t, r.c = e, r.d = function (t, e, n) { r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n }) }, r.r = function (t) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(t, '__esModule', { value: !0 }) }, r.t = function (t, e) { if (1 & e && (t = r(t)), 8 & e) return t; if (4 & e && typeof t === 'object' && t && t.__esModule) return t; const n = Object.create(null); if (r.r(n), Object.defineProperty(n, 'default', { enumerable: !0, value: t }), 2 & e && typeof t !== 'string') for (const i in t)r.d(n, i, function (e) { return t[e] }.bind(null, i)); return n }, r.n = function (t) { const e = t && t.__esModule ? function () { return t.default } : function () { return t }; return r.d(e, 'a', e), e }, r.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, r.p = '', r(r.s = 1) }([function (t, e, r) { 'use strict'; Object.defineProperty(e, '__esModule', { value: !0 }), e.Vault = void 0; const n = (function () { function t () { this._vault = [], this._vaultSize = 120 } return t.prototype.getById = function (t) { let e; return (e = this._vault.filter(function (e) { return e.id === t })) === null || void 0 === e ? void 0 : e[0] }, t.prototype.get = function (t, e) { const r = this._vault.sort(function (t, e) { return e.time - t.time }); if (void 0 === t) return r[0]; for (let n = 0; n < r.length; n++) { if (r[n].time <= t) { const i = { older: r[n], newer: r[n - 1] }; if (e) { const o = Math.abs(t - i.older.time); return Math.abs(t - i.newer.time) <= o ? i.older : i.newer } return i } } }, t.prototype.add = function (t) { this._vault.length > this._vaultSize - 1 && this._vault.sort(function (t, e) { return t.time - e.time }).shift(), this._vault.push(t) }, Object.defineProperty(t.prototype, 'size', { get: function () { return this._vault.length }, enumerable: !1, configurable: !0 }), t.prototype.setMaxSize = function (t) { this._vaultSize = t }, t.prototype.getMaxSize = function () { return this._vaultSize }, t }()); e.Vault = n }, function (t, e, r) { 'use strict'; Object.defineProperty(e, '__esModule', { value: !0 }); const n = r(2); const i = r(0); e.default = { SnapshotInterpolation: n.SnapshotInterpolation, Vault: i.Vault } }, function (t, e, r) { 'use strict'; var n = this && this.__assign || function () { return (n = Object.assign || function (t) { for (var e, r = 1, n = arguments.length; r < n; r++) for (const i in e = arguments[r])Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]); return t }).apply(this, arguments) }; Object.defineProperty(e, '__esModule', { value: !0 }), e.SnapshotInterpolation = void 0; const i = r(0); const o = r(3); const a = (function () { function t (t) { this.vault = new i.Vault(), this._interpolationBuffer = 100, this._timeOffset = -1, this.serverTime = 0, t && (this._interpolationBuffer = 1e3 / t * 3) } return Object.defineProperty(t.prototype, 'interpolationBuffer', { get: function () { const t = this; return { get: function () { return t._interpolationBuffer }, set: function (e) { t._interpolationBuffer = e } } }, enumerable: !1, configurable: !0 }), t.Now = function () { return Date.now() }, Object.defineProperty(t.prototype, 'timeOffset', { get: function () { return this._timeOffset }, enumerable: !1, configurable: !0 }), t.NewId = function () { return Math.random().toString(36).substr(2, 6) }, Object.defineProperty(t.prototype, 'snapshot', { get: function () { const e = this; return { create: function (e) { return t.CreateSnapshot(e) }, add: function (t) { return e.addSnapshot(t) } } }, enumerable: !1, configurable: !0 }), t.CreateSnapshot = function (e) { const r = function (t) { if (!Array.isArray(t)) throw new Error('You have to pass an Array to createSnapshot()'); if (t.filter(function (t) { return typeof t.id !== 'string' && typeof t.id !== 'number' }).length > 0) throw new Error('Each Entity needs to have a id') }; return Array.isArray(e) ? r(e) : Object.keys(e).forEach(function (t) { r(e[t]) }), { id: t.NewId(), time: t.Now(), state: e } }, t.prototype.addSnapshot = function (e) { this._timeOffset === -1 && (this._timeOffset = t.Now() - e.time), this.vault.add(e) }, t.prototype.interpolate = function (t, e, r, n, i) { return void 0 === i && (i = ''), this._interpolate(t, e, r, n, i) }, t.prototype._interpolate = function (t, e, r, i, a) { const u = [t, e].sort(function (t, e) { return e.time - t.time }); const f = i.trim().replace(/\W+/, ' ').split(' '); const s = u[0]; const l = u[1]; const p = s.time; const c = l.time; const d = r <= 1 ? r : (r - c) / (p - c); this.serverTime = o.lerp(c, p, d); if (!Array.isArray(s.state) && a === '') throw new Error('You forgot to add the "deep" parameter.'); if (Array.isArray(s.state) && a !== '') throw new Error('No "deep" needed it state is an array.'); const y = Array.isArray(s.state) ? s.state : s.state[a]; const h = Array.isArray(l.state) ? l.state : l.state[a]; const v = JSON.parse(JSON.stringify(n(n({}, s), { state: y }))); return y.forEach(function (t, e) { const r = t.id; const n = h.find(function (t) { return t.id === r }); n && f.forEach(function (r) { const i = r.match(/\w\(([\w]+)\)/); const a = i ? i == null ? void 0 : i[1] : 'linear'; i && (r = i == null ? void 0 : i[0].replace(/\([\S]+$/gm, '')); const u = t == null ? void 0 : t[r]; const f = (function (t, e, r, n) { if (void 0 !== e && void 0 !== r) { if (typeof e=='string' || 'string'===typeof r) throw new Error("Can't interpolate string!"); if (typeof e=='number' && 'number'===typeof r) { if (t==='linear') return o.lerp(e, r, n); if (t==='deg') return o.degreeLerp(e, r, n); if (t==='rad') return o.radianLerp(e, r, n) } if (typeof e=='object' && 'object'===typeof r && 'quat' === t) return o.quatSlerp(e, r, n); throw new Error('No lerp method "' + t + '" found!') } }(a, n == null ? void 0 : n[r], u, d)); Array.isArray(v.state) && (v.state[e][r] = f) }) }), { state: v.state, percentage: d, newer: s.id, older: l.id } }, t.prototype.calcInterpolation = function (e, r) { void 0 === r && (r = ''); const n = t.Now() - this._timeOffset - this._interpolationBuffer; const i = this.vault.get(n); if (i) { const o = i.older; const a = i.newer; if (o && a) return this._interpolate(a, o, n, e, r) } }, t }()); e.SnapshotInterpolation = a }, function (t, e, r) { 'use strict'; Object.defineProperty(e, '__esModule', { value: !0 }), e.quatSlerp = e.radianLerp = e.degreeLerp = e.lerp = void 0; const n = 3.14159265359; e.lerp = function (t, e, r) { return t + (e - t) * r }, e.degreeLerp = function (t, r, n) { let i; const o = r - t; return o < -180 ? (r += 360, (i = e.lerp(t, r, n)) >= 360 && (i -= 360)) : o > 180 ? (r -= 360, (i = e.lerp(t, r, n)) < 0 && (i += 360)) : i = e.lerp(t, r, n), i }, e.radianLerp = function (t, r, i) { let o; const a = r - t; return a < -n ? (r += 6.28318530718, (o = e.lerp(t, r, i)) >= 6.28318530718 && (o -= 6.28318530718)) : a > n ? (r -= 6.28318530718, (o = e.lerp(t, r, i)) < 0 && (o += 6.28318530718)) : o = e.lerp(t, r, i), o }, e.quatSlerp = function (t, e, r) { const n = { x: 0, y: 0, z: 0, w: 1 }; const i = t.w * e.w + t.x * e.x + t.y * e.y + t.z * e.z; if (Math.abs(i) >= 1) return n.w = t.w, n.x = t.x, n.y = t.y, n.z = t.z, n; const o = Math.acos(i); const a = Math.sqrt(1 - i * i); if (Math.abs(a) < 0.001) return n.w = 0.5 * t.w + 0.5 * e.w, n.x = 0.5 * t.x + 0.5 * e.x, n.y = 0.5 * t.y + 0.5 * e.y, n.z = 0.5 * t.z + 0.5 * e.z, n; const u = Math.sin((1 - r) * o) / a; const f = Math.sin(r * o) / a; return n.w = t.w * u + e.w * f, n.x = t.x * u + e.x * f, n.y = t.y * u + e.y * f, n.z = t.z * u + e.z * f, n } }])).default
